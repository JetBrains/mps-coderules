package jetbrains.mps.coderules.ideaplugin;

/*Generated by MPS */

import jetbrains.mps.annotations.GeneratedClass;

@GeneratedClass(node = "r:835f8ea3-a800-4588-a80b-1de6d47c2098(jetbrains.mps.coderules.ideaplugin)/8406119028234017931", model = "r:835f8ea3-a800-4588-a80b-1de6d47c2098(jetbrains.mps.coderules.ideaplugin)")
public class TypecheckingOptions {
  public static final String PREFIX = "mps.coderules.typechecking.";

  public static final String OPTION_TYPECHECKING_ENABLED = PREFIX + "enabled";
  public static final String OPTION_TYPECHECKING_WATCHING = PREFIX + "watching";
  public static final String OPTION_TYPECHECKING_REPORTING = PREFIX + "report";
  public static final String OPTION_TYPECHECKING_TRACE = PREFIX + "trace";

  public static final Config.Option<Boolean> TYPECHECKING_ENABLED = new Config.Option<Boolean>() {
    @Override
    public Boolean get(Config config) {
      return (Boolean) config.getOption(OPTION_TYPECHECKING_ENABLED);
    }
  };
  public static final Config.Option<Boolean> TYPECHECKING_WATCHING = new Config.Option<Boolean>() {
    @Override
    public Boolean get(Config config) {
      return (Boolean) config.getOption(OPTION_TYPECHECKING_WATCHING);
    }
  };
  public static final Config.Option<Boolean> TYPECHECKING_REPORTING = new Config.Option<Boolean>() {
    @Override
    public Boolean get(Config config) {
      return (Boolean) config.getOption(OPTION_TYPECHECKING_REPORTING);
    }
  };
  public static final Config.Option<Boolean> TYPECHECKING_TRACE = new Config.Option<Boolean>() {
    @Override
    public Boolean get(Config config) {
      return (Boolean) config.getOption(OPTION_TYPECHECKING_TRACE);
    }
  };
  public static final Config.Option<Boolean> COLLECT_TRACES = new Config.Option<Boolean>() {
    @Override
    public Boolean get(Config config) {
      if (Boolean.TRUE != config.getOption(OPTION_TYPECHECKING_REPORTING)) {
        return Boolean.FALSE;
      }
      return (Boolean) config.getOption(OPTION_TYPECHECKING_TRACE);
    }
  };

  private static Config USER_CONFIG;

  private TypecheckingOptions() {
  }

  public static Config getUserConfig() {
    if (USER_CONFIG == null) {
      USER_CONFIG = Config.create();
      registerDefaultProviders(USER_CONFIG);
    }
    return USER_CONFIG;
  }

  public static Config getUiConfig() {
    Config config = TypecheckingOptions.getUserConfig().copy();
    registerUiProvider(config);
    return config;
  }

  private static void registerUiProvider(Config config) {

    config.registerProvider(Config.Level.UI, PREFIX, (String key) -> {

      TypecheckingSettings settings = TypecheckingSettings.getInstace();
      if (OPTION_TYPECHECKING_ENABLED.equals(key)) {
        return settings.isTypecheckingEnabled();
      }

      if (OPTION_TYPECHECKING_WATCHING.equals(key)) {
        return settings.isWatchingEnabled();
      }

      if (OPTION_TYPECHECKING_REPORTING.equals(key)) {
        return settings.isReportingEnabled();
      }

      if (OPTION_TYPECHECKING_TRACE.equals(key)) {
        return settings.isTracingEnabled();
      }

      return null;
    });

    config.registerProvider(Config.Level.USER, CoderulesOptions.PREFIX, (String key) -> {
      TypecheckingSettings settings = TypecheckingSettings.getInstace();
      if (CoderulesOptions.OPTION_PROFILING_ENABLED.equals(key)) {
        return settings.isProfilingEnabled();
      }

      return null;
    });

  }

  private static void registerDefaultProviders(Config config) {
    CoderulesOptions.registerDefaultProviders(config);

    config.registerProvider(Config.Level.USER, PREFIX, (String key) -> {

      if (OPTION_TYPECHECKING_ENABLED.equals(key)) {
        return Boolean.valueOf(System.getProperty(OPTION_TYPECHECKING_ENABLED, "false"));

      }

      if (OPTION_TYPECHECKING_WATCHING.equals(key)) {
        return Boolean.valueOf(System.getProperty(OPTION_TYPECHECKING_WATCHING, "false"));

      }

      if (OPTION_TYPECHECKING_REPORTING.equals(key)) {
        return Boolean.valueOf(System.getProperty(OPTION_TYPECHECKING_REPORTING, "false"));

      }

      if (OPTION_TYPECHECKING_TRACE.equals(key)) {
        return Boolean.valueOf(System.getProperty(OPTION_TYPECHECKING_TRACE, "false"));

      }

      return null;
    });
  }

}
